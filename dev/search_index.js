var documenterSearchIndex = {"docs":
[{"location":"input/#Input-Options","page":"Input Options","title":"Input Options","text":"","category":"section"},{"location":"input/","page":"Input Options","title":"Input Options","text":"DocTestSetup = quote\n    options = Dict()\n    Nc = 2\nend","category":"page"},{"location":"input/#Reservoir","page":"Input Options","title":"Reservoir","text":"","category":"section"},{"location":"input/#dx,-dy,-dz","page":"Input Options","title":"dx, dy, dz","text":"","category":"section"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Cell size along x, y, z dimension","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Data type","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Type Size\nFloat64 -\nVector{Float64} N_c","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Example:","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"julia> options[\"dx\"] = 50.;\n\njulia> options[\"dy\"] = 50.;\n\njulia> options[\"dz\"] = 10.;\n","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"julia> options[\"dx\"] = 50. * ones(Nc);\n\njulia> options[\"dy\"] = 50. * ones(Nc);\n\njulia> options[\"dz\"] = 10. * ones(Nc);\n","category":"page"},{"location":"input/#Cartesian-Grid","page":"Input Options","title":"Cartesian Grid","text":"","category":"section"},{"location":"input/#nx,-ny,-nz","page":"Input Options","title":"nx, ny, nz","text":"","category":"section"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Number of cells along x, y, z dimension","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Data type","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Type Size\nInt64 -","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"Example:","category":"page"},{"location":"input/","page":"Input Options","title":"Input Options","text":"julia> options[\"nx\"] = 50;\n\njulia> options[\"ny\"] = 60;\n\njulia> options[\"nz\"] = 1;\n","category":"page"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.runsim","category":"page"},{"location":"api/#ResSimAD.SimMaster.runsim","page":"Reference","title":"ResSimAD.SimMaster.runsim","text":"runsim(sim::Sim; verbose=BRIEF)\n\nRun simulation from day sim.scheduler.t_current to day sim.scheduler.time_step[end]\n\nExamples\n\njulia> using ResSimAD: get_model, runsim, SILENT\n\njulia> sim, options = get_model(\"example1\");\n\njulia> sim.scheduler.t_current\n0.0\n\njulia> sim.scheduler.time_step[end]\n1825.0\n\njulia> runsim(sim, verbose=SILENT);\n\njulia> sim.scheduler.t_current\n1825.0\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.step_to","category":"page"},{"location":"api/#ResSimAD.SimMaster.step_to","page":"Reference","title":"ResSimAD.SimMaster.step_to","text":"step_to(sim::Sim, t::Float64; verbose=BRIEF)\n\nSimluate until day t.\n\nExamples\n\njulia> using ResSimAD: get_model, step_to, SILENT\n\njulia> sim, options = get_model(\"example1\");\n\njulia> sim.scheduler.t_current\n0.0\n\njulia> step_to(sim, 100.0, verbose=SILENT);\n\njulia> sim.scheduler.t_current\n100.0\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.time_step","category":"page"},{"location":"api/#ResSimAD.SimMaster.time_step","page":"Reference","title":"ResSimAD.SimMaster.time_step","text":"time_step(sim::Sim; verbose=BRIEF)\n\nSimluate for one time step. Time step length is sim.scheduler.dt.\n\nExamples\n\njulia> using ResSimAD: get_model, time_step, SILENT\n\njulia> sim, options = get_model(\"example1\");\n\njulia> sim.scheduler.t_current\n0.0\n\njulia> sim.scheduler.dt\n0.1\n\njulia> time_step(sim, verbose=SILENT);\n\njulia> sim.scheduler.t_current\n0.1\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.newton_step","category":"page"},{"location":"api/#ResSimAD.SimMaster.newton_step","page":"Reference","title":"ResSimAD.SimMaster.newton_step","text":"newton_step(sim::Sim; verbose=BRIEF)\n\nSimulate for one newton step.\n\nExamples\n\njulia> using ResSimAD: get_model, newton_step, get_residual_error, SILENT\n\njulia> using Printf: @printf\n\njulia> sim, options = get_model(\"example1\");\n\njulia> @printf(\"%.3e\",get_residual_error(sim))\n2.210e-01\njulia> newton_step(sim)\n\njulia> @printf(\"%.3e\",get_residual_error(sim))\n1.927e-02\njulia> newton_step(sim)\n\njulia> @printf(\"%.3e\",get_residual_error(sim))\n9.871e-05\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.change_well_mode","category":"page"},{"location":"api/#ResSimAD.SimMaster.change_well_mode","page":"Reference","title":"ResSimAD.SimMaster.change_well_mode","text":"change_well_mode(sim::Sim, name::String, mode::String, target::Float64)\n\nChange the control mode of well name to be mode with target value target\n\nArguments\n\nsim::Sim: Sim object\nname::String: name of the well\nmode::String: target mode, not case sensitive\n\"bhp\": constant BHP\n\"shut\": shut-in\n\"orat\": constant oil rate\n\"wrat\": constant water rate\n\"lrat\": constatnt liquid rate\ntarget::Float64\n\nExamples\n\njulia> using ResSimAD: get_model, change_well_mode\n\njulia> sim, options = get_model(\"example1\");\n\njulia> change_well_mode(sim, \"P1\", \"bhp\", 6200.);\n\njulia> println(sim.facility[\"P1\"].mode)\nCBHP\n\njulia> println(sim.facility[\"P1\"].target)\n6200.0\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.change_well_target","category":"page"},{"location":"api/#ResSimAD.SimMaster.change_well_target","page":"Reference","title":"ResSimAD.SimMaster.change_well_target","text":"change_well_target(sim::Sim, name::String, target::Float64; cut_dt=false)\n\nChange the control target of well name to be target. cut time step to be sim.scheduler.dt0 if cut_dt=true\n\nArguments\n\nsim::Sim: Sim object\nname::String: name of the well\ntarget::Float64\ncut_dt::Boolean\n\nExamples\n\njulia> using ResSimAD: get_model, change_well_target\n\njulia> sim, options = get_model(\"example1\");\n\njulia> change_well_target(sim, \"P1\", 6200.);\n\njulia> println(sim.facility[\"P1\"].target)\n6200.0\n\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.get_well_rates","category":"page"},{"location":"api/#ResSimAD.SimMaster.get_well_rates","page":"Reference","title":"ResSimAD.SimMaster.get_well_rates","text":"get_well_rates(sim::Sim, name::String, data::String)\n\nGet column data from dataframe sim.facility[name].results\n\nArguments\n\nsim::Sim: Sim object\nname::String: name of the well\ndata::String: column name\n\"Time\": Time steps\n\"ORAT\": Oil rate\n\"WRAT\": Water rate\n\"GRAT\": Gas rate\n\"LRAT\": Liquid rate\n\"WBHP\": BHP\n\nExamples\n\njulia> using ResSimAD: get_model, runsim, get_well_rates, SILENT\n\njulia> sim, options = get_model(\"example1\");\n\njulia> runsim(sim, verbose=SILENT);\n\njulia> tstep = get_well_rates(sim, \"P1\", \"Time\");\n\njulia> qo = get_well_rates(sim, \"P1\", \"ORAT\");\n\njulia> length(tstep) > 0\ntrue\njulia> length(qo) > 0\ntrue\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.add_well","category":"page"},{"location":"api/#ResSimAD.SimMaster.add_well","page":"Reference","title":"ResSimAD.SimMaster.add_well","text":"add_well(sim::Sim, welltype::String, well_option::Dict)\n\nAdd one well of type welltype, with well setups specified in well_option\n\nArguments\n\nsim::Sim: Sim object\nwelltype::String: type of the well (case insensitive)\n\"injector\": injector\n\"producer\": producer\nwell_option::Dict: well setups with keys\n\"name\" -> String, name of the well\n\"perforation\" -> Vector{Tuple{Int, Int, Int}}, indices for perforated blocks\n\"radius\" -> Float64, well radius\n\"mode\" -> String, well control mode\n\"target\" -> Float64, well constrol target\n\nExamples\n\njulia> using ResSimAD: get_model, add_well\n\njulia> sim, options = get_model(\"example1\");\n\njulia> length(keys(sim.facility))\n2\n\njulia> p2 = Dict(\"name\" => \"P2\", \"perforation\"=>[(5,5,1)], \"radius\"=>0.5, \"mode\"=>\"bhp\", \"target\"=>5600.);\n\njulia> add_well(sim, \"producer\", p2);\n\njulia> length(keys(sim.facility))\n3\n\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.shut_well","category":"page"},{"location":"api/#ResSimAD.SimMaster.shut_well","page":"Reference","title":"ResSimAD.SimMaster.shut_well","text":"shut_well(sim::Sim, name::String)\n\nShut well name\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Reference","title":"Reference","text":"ResSimAD.change_dt","category":"page"},{"location":"api/#ResSimAD.SimMaster.change_dt","page":"Reference","title":"ResSimAD.SimMaster.change_dt","text":"change_dt(sim::Sim, dt::Float64)\n\nSet next time step size to be dt\n\n\n\n\n\n","category":"function"},{"location":"examples/","page":"Example Models","title":"Example Models","text":"ResSimAD.Models.example1","category":"page"},{"location":"examples/#ResSimAD.Models.example1","page":"Example Models","title":"ResSimAD.Models.example1","text":"example1()\n\nExample model one.\n\nModel description\n\nDimension: 30times15times1\nGrid size: 500times500times200 (ft)\nPermeability: 200.0 md\nPorosity: 0.2\nFluid: Oil-Water\nInitial pressure: 6000.0 psi\nInitial water saturation: 0.1\nWells:\nP1: producer at (1, 1, 1), constant BHP 5500.0 psi\nI1: injector at (30, 15, 1), constant BHP 6500.0 psi\nSchedule:\ndt0: 0.1 Day\ndt_max: 50.0 Day\nt_end: 1825 Day\n\n\n\n\n\n","category":"function"},{"location":"workflow/#Basic-workflow","page":"Basic workflow","title":"Basic workflow","text":"","category":"section"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"The basic workflow for ResSimAD.jl consists of three steps:","category":"page"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"Specify simulation setups\nRun simulation\nVisualize and save simulation results","category":"page"},{"location":"workflow/#Specify-simulation-setups","page":"Basic workflow","title":"Specify simulation setups","text":"","category":"section"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"The most convenient way for specifying simulation setups for ResSimAD.jl is using a nested Dictionary. The following example shows how simulation setups are specified in the ResSimAD.Models.example1 model.","category":"page"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"using ResSimAD\n# This example will use the following functions/types from ResSimAD\n# get_table, runsim, Sim, BRIEF, get_well_rates\n\n\n## Specify input\n# Grid and Rock\noptions = Dict();\noptions[\"nx\"] = 30; options[\"ny\"] = 15; options[\"nz\"] = 1;\noptions[\"dx\"] = 50.; options[\"dy\"] = 50.; options[\"dz\"] = 20.;\noptions[\"d\"] = 8000.;\noptions[\"perm\"] = 200.; options[\"poro\"] = 0.2;\n# Fluid\noptions[\"fluid\"] = \"OW\"\noptions[\"po\"] = 6000.;\noptions[\"sw\"] = 0.1;\noptions[\"PVDO\"] = get_table(\"PVDO.DAT\");\noptions[\"PVTW\"] = get_table(\"PVTW.DAT\");\noptions[\"SWOF\"] = get_table(\"SWOF.DAT\");\n# Wells\noptions[\"producers\"] = [];\np1 = Dict();\np1[\"name\"] = \"P1\"; p1[\"perforation\"] = [(1,1,1)]; p1[\"radius\"] = 0.5;\np1[\"mode\"] = \"bhp\"; p1[\"target\"] = 5500.;\npush!(options[\"producers\"], p1);\n\noptions[\"injectors\"] = [];\ni1 = Dict();\ni1[\"name\"] = \"I1\"; i1[\"perforation\"] = [(30,15,1)]; i1[\"radius\"] = 0.5;\ni1[\"mode\"] = \"bhp\"; i1[\"target\"] = 6500.;\npush!(options[\"injectors\"], i1);\n# Schedule\noptions[\"dt0\"] = 0.1\noptions[\"dt_max\"] = 50.; options[\"t_end\"] = 10 * 182.5;\noptions[\"min_err\"] = 1.0e-3;\n","category":"page"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"Currently supported input options are summarized in Input Options.","category":"page"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"A Sim object can then be created with options:","category":"page"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"sim = Sim(options);\nprintln(\"Total number of cells:\", sim.nc)","category":"page"},{"location":"workflow/#Run-simluation","page":"Basic workflow","title":"Run simluation","text":"","category":"section"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"To run simulation, simply call:","category":"page"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"runsim(sim; verbose=BRIEF)","category":"page"},{"location":"workflow/#Visualize-and-save-simulation-results","page":"Basic workflow","title":"Visualize and save simulation results","text":"","category":"section"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"We use the Plots package for results visualizations.","category":"page"},{"location":"workflow/#Plot-production-curve","page":"Basic workflow","title":"Plot production curve","text":"","category":"section"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"using Plots\ngr(format=:svg) # hide\n\nt = get_well_rates(sim, \"P1\", \"TIME\");\nqo = get_well_rates(sim, \"P1\", \"ORAT\");\nqw = get_well_rates(sim, \"I1\", \"WRAT\");\np1 = plot(t, qo, color=:black, marker=true,\n     xlabel=\"Day\", ylabel=\"Oil Rate (STB/Day)\",\n     title=\"P1 Oil Rate\");\np2 = plot(t, -qw, color=:black, marker=true,\n     xlabel=\"Day\", ylabel=\"Water Inj. Rate (STB/Day)\",\n     title=\"I1 Water Injection Rate\");\nplot(p1, p2, layout=(1,2), legend=false, size=(720,280))","category":"page"},{"location":"workflow/#Plot-state-maps","page":"Basic workflow","title":"Plot state maps","text":"","category":"section"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"# Visualize state maps\ncmap = cgrad(:jet);\npo = reshape(sim.po_rec[t[end]], sim.nx, sim.ny);\nsw = reshape(sim.sw_rec[t[end]], sim.nx, sim.ny);\np1 = heatmap(po, color=cmap, title=\"Po at Day $(t[end])\");\np2 = heatmap(sw, color=cmap, title=\"Sw at Day $(t[end])\");\nplot(p1, p2, layout=(1,2), size=(720,280))","category":"page"},{"location":"workflow/#Plot-newton-iterations","page":"Basic workflow","title":"Plot newton iterations","text":"","category":"section"},{"location":"workflow/","page":"Basic workflow","title":"Basic workflow","text":"newton_iter = sim.nsolver.num_iter;\nscatter(newton_iter, markershape=:square, size=(360,280), legend=false,\n        xlabel=\"Time step\", ylabel=\"Newton iterations\")","category":"page"},{"location":"#ResSimAD.jl","page":"Home","title":"ResSimAD.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"A reservoir simulator in a modern programming language.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Interactivity: run simulations in interactive programming environments such as Jupyter notebook or Juno. With the PyJulia python module, ResSimAD.jl is also accessible from Python.\nDynamic control: run simulation timestep by timestep, or newton step by newton step, and modify parameters or controls dynamically.\nReal-time feedback: extract reservoir dynamic states for analysis and visualization.\nDistributed computing: with packages such as ClusterManagers.jl, it is very convenient to run multiple simulations in parallel on a HPC cluster. This is very useful for field optimization and history matching.","category":"page"},{"location":"#Automatic-Differentaition-(AD)","page":"Home","title":"Automatic Differentaition (AD)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An operator-overloading-based forward mode AD framework is developed to compute gradients automatically. Instead of using existing Julia AD packages such as Zygote, Tracker or DualNumbers, a customized AD framework is developed here for the sake of efficiency. The AD framework underlying ResSimAD.jl is tailored for the operations in reservoir simulation. This allows maximum level of optimization which makes this AD framework almost as fast as hand-written differentiation. On the other hand, the AD framework may need to be extended if some new operations are introduced when extending the functionality of ResSimAD.jl.","category":"page"},{"location":"#Functionality","page":"Home","title":"Functionality","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Functionality-wise, ResSimAD.jl is still at a very early stage. It currently works for simple simulation models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Grid: 3D Cartesian grid\nFluid: two phase (oil-water) dead oil\nWell: single perforation","category":"page"},{"location":"","page":"Home","title":"Home","text":"But the underlying framework of ResSimAD.jl is designed for easy extension for more complex simulation models, such as those with unstructured grid, three-phase black oil fluid model, wells with multiple perforations. This is largely facilitated by the powerful type system and multiple dispatch in Julia, and the AD framework.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Extensions to more complex problems, such as compositional fluid models, multi-segment wells, require more effort. The current AD framework is highly optimized for black oil models and standard wells. Extending the AD framework to handle compositional models, advanced wells and maintaining the same level of efficiency will require some effort. These will not be the focus for ResSimAD.jl for now.","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For a limited number of test problems, the speed of ResSimAD.jl is comparable to, and in some cases even faster than, Eclipse and ADGPRS. This is very impressive given that ResSimAD.jl is written in pure Julia and that ResSimAD.jl uses AD. This is largely facilitated by","category":"page"},{"location":"","page":"Home","title":"Home","text":"The fast speed of the Julia language, especially the highly optimized array broadcasting, which makes it possible to completely avoid the overhead of memory allocation induced by operator-overloading-based AD.\nResSimAD.jl currently uses the GMRES + ILU linear solver from the IterativeSolver.jl package. For the simple problems that ResSimAD.jl currently supports, it is efficient enough.\nFile IO can be completely avoid when using ResSimAD.jl in an interactive environment. Simulation results can stay in memory before they are analyzed or visualized for downstream tasks.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ResSimAD.jl is currently a private repository. If you have access to this repository, please download the source code. Then install manually with","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ResSimAD.jl","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Example models are available in src/models/","category":"page"},{"location":"","page":"Home","title":"Home","text":"Code for simulating the example models is available in examples/","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
